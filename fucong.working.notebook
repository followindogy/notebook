climc客户端：
/opt/cloud/meituan/client/climc
host-list 查看主机列表
server-list 查看虚拟机列表
image-list 查看磁盘镜像列表
server-create fc0 --host yfmostestnet10 --allow-delete --auto-start --flavor C1_M1 --image f12cd214-6004-4290-b2a8-91511086f1ec(系统)
server-start test 启动虚拟机
vnc-connect test 获得访问虚拟机VNC的URL
server-password 获取密码

美团云一些机器：
ssh fucong@yf-cloud-netctr03 测试机环境管理机器
ssh fucong@yf-mos-test-net10 测试环境宿主机
访问yf-mos-test-net16 需要密码，ssh fucong@dx-cloud-climc01 -> sudo -iu sankuai -> ssh yf-mos-test-net16

git: 
* git add 
* git status
* git commit   git commit --amend -a 修改最近的一次commit 而且把暂存区和工作区的数据commit
* git rebase -i 分支/版本号    手动重建git 历史,修改当前分支 可以把远程分支的commit合并到本地分支 git rebase upstream/master. 可以用作合并多个commit
* git remote -v 查看远程版本库 可以看到origin的值，表示远程版本库的链接，在git push 中使用
* git push -u (首次) origin master
* git remote add origin git@github.com:followindogy/gitlearn.git 
* git remote rm origin 删除与远程版本库的连接
* git rm  删除文件
* git reset —hard HEAD^ 版本回退
* git checkout —test1.c 从最近一次commit或者add 恢复工作区
* git checkout HEAD test1.c 丢弃暂存区修改
* git log --stat -p 查看历史commit 和操作信息,看不到已经回退commit
* git reflog 查看历史命令
* gitigore 忽略一些文件  强制添加 可用git add -f
* HEAD 指向当前分支当前commit
* git branch 查看分支
* git branch dev 创建分支
* git branch -D dev 删除分支
* git branch -a 查看远程分支
* git pull 下拉远程分支信息
* git checkout dev  切换到本地分支 本地没有改分支，而且远程有该分支，可以直接切换到远程分支
* 冲突解决，被两个分支同时修改的文件需要合并失败，需要解决冲突
* 初始化远程连接失败，可以使用git clone
* git fetch origin 
* git diff tmp 比较本分支与tmp分支
* git merge tmp 把tmp分支上更改和到当前分支
* ssh-keygen 生成ssh key

Ovs 相关命令：
vs-ofctl add-flow brpri priority=31059,arp,in_port=190,actions=drop
vs-ofctl dump-flows brpri
ip netns add h1 创建网络名字空间
ovs-vsctl add-br s1 创建交换机
ip link add h1-eth0 type veth peer name s1-eth1 创建type网卡
ip link set h1-eth0 netns h1 添加type网卡到h1
ip netns exec h1 ping 
ovs-vsctl add-port s1 s1-eth1 交换机添加端口
ovs-vsctl set-controller s1 tcp:127.0.0.1 controller ptcp: & 配置控制器
ifconfig s1-eth1 up
ip netns exec h1 ifconfig h1-eth0 10.1
service openvswitch start



mz(mousezahn) && netsniff-ng && tcpdump 相关命令:
sudo /usr/local/sbin/mz bond1 -t arp -a 00:22:e5:8d:e2:22 -b ff:ff:ff:ff:ff:ff "request, senderip=172.16.249.62, sendmac=00:22:e5:8d:e2:19, targetip=172.16.249.43, targetmac=ff:ff:ff:ff:ff:ff"
netsniff-ng --in test.pcap --out eth0
tcpdump -i eth0 host 169... -w /home/fucong

交换机相关：
在数据链路层扩展以太网
学习MAC地址：
1.交换机每收到一帧时，会先检查以太网头部源MAC地址，看看自己MAC地址表中有没有地址。如果有则2，如果没有，则将这个MAC地址、进入时间、进入端口写入MAC地址表。
2.检查目的MAC地址，然后到该表中查找，如果有匹配项，则按照表项中端口号转发；如果没有则转发到除了进口之外的所有端口。
交换机是不区分包的类型的
3.交换机不会向帧进入端口转发，因为不需要交换机就可实现，则drop。

优点：
1.过滤通信量，增加吞吐量，交换机工作在链路层的MAC子层，使以太网各网段成为隔离开的碰撞域。
2.扩大了物理范围，增加整个以太网上的主句数量。
3.提高可靠性，网络故障一般只影响部分网段。
缺点：
1.先存储、查找转发表，必须执行CSMA/CD算法，增加时延。
2.没有流量控制
3.用户数不能太多（不超过几百个），否则还会传播过多的广播信息造成网络拥塞，即广播风暴。
网桥会丢弃CRC循环检验有错的帧

网卡相关：
两种工作模式：
1.混杂模式：
不管数据帧中的地址是否与自己的MAC地址匹配，都接受下来。
2.非混杂模式：
只接受目的地址与自己MAC地址相匹配，以及广播数据包
为了监听网络上的流量，必须设置为混杂模式

ARP缓存：
在接到ARP请求时，目的主机会根据ARP头中的源MAC和源IP更新本地ARP缓存（arp -a），下次查询MAC地址会优先从缓存查，如果缓存出错，会再尝试缓存之后，重新广播ARP请求

数据链路层：
点对点信道：PPP协议 广播信道：以太网
广泛使用循环冗余校验是否发生帧错误（CRC）
计算机的硬件地址在网卡ROM中，IP地址在计算机存储器中
协议栈把IP数据报向下发给网卡，组装成帧发送到局域网
集线器工作在物理层，只负责比特位的转发
一个集线器或是一个总线网络里的网卡在发包时要先进行碰撞检测（CSMA/CD 载波监听多点接入和碰撞检测协议），检测总线上是否有其他站在发送数据，如果有则等待信道变为空闲再发送，交换机可以隔离碰撞域。
MAC帧头部即以太网头部，有源MAC，目的MAC，网络层协议（IP协议等）

网络层：
网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务，不提供服务质量的承诺。
协议：ICMP、IGMP、IP、RARP、ARP  ICMP和IGMP使用IP协议，IP协议使用ARP和RARP协议
一个路由器至少连接两个网络，至少有两个IP。
分组在网络中转发的时候，源IP和目的IP是不改变的，源MAC和目的MAC会改变。
IP头上有ttl表示生存时间，每经过一个路由器ttl - 1，ttl为0路由器则drop，防止包在网络里一直逗留。
同一个网络上的主机通信是不经过路由器的，查完路由后直接交付。跨网络一定经过路由器，由路由器转发。
ICMP: 允许主机或路由器报告差错情况 ping就是应用层直接调用网络层ICMP实现的 

traceroute工作原理：源主句向目的主机放松一连串的IP数据报，数据报中封装的是无法交付的udp报文。第一个数据报ttl = 1，路由器接到该报文，ttl - 1 = 0，路由器丢弃该报文 ，并向源主机发送一个ICMP时间超过差错
报文，源主机接到超时错误之后会把ttl+1 继续发送报文，直到目的主机解析该报文返回ICMP终点不可达错误报文，成功结束。

虚拟专用网，专用IP地址仅在机构内部有效，因特网上所有路由器都不会对目的地址是专用IP地址进行转发：
10.0.0.0到10.255.255.255 172.16.0.0到172.31.255.255 192.168.0.0到192.168.255.255
一个机构下两个距离很远的专用网，可以用两个路由器连到因特网，在因特网上加密传输

网络地址转换NAT：
专用IP是不能上网的，需要在专用网络连接到因特网上的路由器安装NAT软件，它至少有一个外部IP地址。
专用IP只能主动地去访问，所以不能用作服务器.NAT路由器接到外部包时，会查看NAT地址转换表，修改目的IP，交付到本地网络。

NAT 地址转换表举例：NAT路由器有多个外部IP地址，可以支持更多的内部请求。如果不加上端口号，一个外部一次只能支持一个专用IP的请求。
方向    旧IP和端口号                    新IP和端口号
出      192.168.0.3:30000               172.38.1.5:40001
出  	192.168.0.4:40000		172.38.1.5:40002
入	172.38.1.5:40001		192.168.0.3:30000
入	172.38.1.5:40002		192.168.0.4:40000

传输层：
1.TCP头部：源端口号，目的端口号，序号
2.操作系统中的网路控制软件称为协议栈，硬件控制是网卡。应用程序=>协议栈=>网卡驱动=>网卡.只有主机的协议栈才有传输层，路由器是工作在下三层的。
3.传输层是向应用程序提供服务，加端口号，网络层是转发包，加IP地址，数据链路层是在局域网内发包，加MAC地址
4.UDP:无连接，尽最大努力交付，面向报文，一次只交付一个报文（UDP对应用程序交下来的报文，既不合并也不拆分，加上首部后交给IP层，IP层在传输时有可能会分片，降低效率），首部只有8个字节。
5.UDP头：源端口，目的端口，长度，检验和。  IP数据报的检验只是检验首部，UDP的检验是把首部和报文放在一起检验。
6.TCP：面向连接，只支持一对一，全双工，面向字节流，可靠交付
7.面向字节流：虽然应用程序和TCP的交互式一次一个数据块（大小不等）,但是TCP把这些包看做是一连串无结构的字节流。TCP保证接收方和发送方的字节流一致，不保证数据块的一致。
8.停止等待协议：一次只发送一个分组，收到确认后再发送下一个分组。a.发送完需要保存副本 b.分组和确认分组需要编号（明确是哪个分组的确认）c.超时计时器比分组传输往返平均时间更长一些 信道利用率太低
9.TCP首部：20字节，源端口，目的短裤，序号（TCP中每一个字节按顺序编号，一段报文序号为301，数据100字节，本报文第一个字节为301，最后一个字节为400），确认号(期望收到下一个报文的第一个字节编号)，确认ACK，
  仅当ACK=1，确认序号字段才有效，同步SYN（连接建立时用来同步序号，当SYN=1，ACK=0表示一个连接请求报文，对方同意，相应报文SYN=1，ACK=1，SYN=1表示连接请求或者连接接收报文），窗口（2字节）
10.窗口: 确认号是701，窗口字段是1000，表明发送此报文的一方还有接受1000个字节（701~1700）的缓存，动态变化。
11.滑动窗口: 窗口后沿（没有接到新确认，不动，有新确认，往前移，不会往后移），窗口前沿（通常往前移，没有收到确认and通知的窗口不变不移动， 收到确认但是对方通知的窗口减小了，也有可能不动）
12.超时重传时间的选择: RTT 报文发出的时间和报文接到确认的时间差，就是报文往返时间 RTT
13.流量控制:发送方发送速率不要太快，要让接收方来得及接收 接收端控制发送端，通过窗口大小
14:拥塞控制:防止将过多的包注入网络，造成网络瘫痪
15.发送窗口大小受接收方缓冲空间（已窗口大小值限制发送窗口大小）和拥塞控制共同决定。发送窗口一定不能超过接受窗口。MIN（rwnd，cwnd）为滑动窗口和拥塞窗口的较小值。
16.拥塞控制的原则:网络没有出现拥塞，就把拥塞窗口增大一些，否则减少一些。只要没有按时接到应当接受的报文，就可以猜想网络拥塞。
17.拥塞控制：慢开始，从1字节开始，设置慢开始门限，没有拥塞时，小于慢开始门限时，指数增加，大于慢开始门限，加法增加。出现拥塞，慢开始门限设为现在拥塞窗口的一半，拥塞窗口变为1
18.快重传：  接收方接到序号，1、2、4、5、6，会发出对序号2的确认，可以对4、5、6不进行确认。快重传中，接收方在接到456时会重复确认2，接收方在接到3个重复确认，就认定报文3没有到达，进行重发。
19.快恢复：在慢开始的基础上，出现拥塞，拥塞窗口不减小为1，而是置为当前值得一半。
20.四次挥手发起方TIMI_WAIT=2MSL(最长报文寿命)。1.可以重传ACK给接收方，2.继续占用本连接一段时间，使此次连接中的报文在网路中失效，不会对后续连接造成影响。
21.三次握手，前两次都是SYN=1，不能携带数据。第三次确认ACK可以传输数据，已经不是SYN了。

应用层:
1.DNS 53 UDP 高速缓存，.com、.org属于顶级域名，DNS请求首先会去最近的DNS服务器，每台DNS服务器都会指向根域名服务器，去根服务器找到应该去哪个顶级域名服务器查。
2.ssh 22, talent 23, ftp 21, http 80, dns 53.
3.HTTP 超文本传输协议: 基于TCP 
5.HTTP 状态码： 1xx：表示通知信息，表示正在处理 2xx：表示成功 3xx: 重定向 4xx:客户的差错，400 bad request, 404 not found， 5xx 表示服务器出错。
6.cookie: HTTP是无状态的，服务器可以用cookie记住用户的操作，列如把多次选购的商品放在一个购物车中。 服务器在后台为用户创建一个项目，在给用户的HTTP响应报文添加set-cookie


操作系统相关：
1.死锁条件：
* 互斥条件：一个资源每次只能被一个进程使用
* 请求与保持条件：一个进程因请求资源而阻塞时，对已有的资源不释放
* 不可剥夺条件：进程已获得的资源，在未使用完之前，不可强制剥夺
* 循环等待
多线程同步：
1.互斥锁与条件变量：
a.互斥锁能够解决资源的互斥访问,但是在某些情况下,互斥并不能解决问题,比如两个线程需要互斥的处理各自的操作,但是一个线程的操作仅仅存在一种条件成立的情况下执行,一旦错过不可再重现,由于线程间相互争夺cpu资源,因此在条件成立的时候,该线程不一定争夺到cpu而错过,导致永远得不到执行。
b.条件变量相对于互斥量最大的优点在于允许线程以无竞争的方式等待条件的发生。当一个线程获得互斥锁后，发现自己需要等待某个条件变为真，如果是这样，该线程就可以等待在某个条件上，这样就不需要通过轮询的方式来判断添加，大大节省了CPU时间。
c.条件变量与while配合使用不用if，防止多个线程被虚假唤醒，用while重新判断条件。

#include <unistd.h>
#include <sys/types.h>
#include <pthread.h>
#include <semaphore.h>

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#define ERR_EXIT(m) \
        do \
        { \
                perror(m); \
                exit(EXIT_FAILURE); \
        } while(0)

#define CONSUMERS_COUNT 2
#define PRODUCERS_COUNT 1

pthread_mutex_t g_mutex;
pthread_cond_t g_cond;

pthread_t g_thread[CONSUMERS_COUNT + PRODUCERS_COUNT];

int nready = 0;

void *consume(void *arg)
{
    int num = (int)arg;
    while (1)
    {
        pthread_mutex_lock(&g_mutex);
        while (nready == 0)
        {
            printf("%d begin wait a condtion ...\n", num);
            pthread_cond_wait(&g_cond, &g_mutex);
        }

        printf("%d end wait a condtion ...\n", num);
        printf("%d begin consume product ...\n", num);
        --nready;
        printf("%d end consume product ...\n", num);
        pthread_mutex_unlock(&g_mutex);
        sleep(1);
    }
    return NULL;
}

void *produce(void *arg)
{
    int num = (int)arg;
    while (1)
    {
        pthread_mutex_lock(&g_mutex);
        printf("%d begin produce product ...\n", num);
        ++nready;
        printf("%d end produce product ...\n", num);
        pthread_cond_signal(&g_cond);
        {
            printf("%d begin wait a condtion ...\n", num);
            pthread_cond_wait(&g_cond, &g_mutex);
        }

        printf("%d end wait a condtion ...\n", num);
        printf("%d begin consume product ...\n", num);
        --nready;
        printf("%d end consume product ...\n", num);
        pthread_mutex_unlock(&g_mutex);
        sleep(1);
    }
    return NULL;
}

void *produce(void *arg)
{
    int num = (int)arg;
    while (1)
    {
        pthread_mutex_lock(&g_mutex);
        printf("%d begin produce product ...\n", num);
        ++nready;
        printf("%d end produce product ...\n", num);
        pthread_cond_signal(&g_cond);

pthread_t g_thread[CONSUMERS_COUNT + PRODUCERS_COUNT];

int nready = 0;

void *consume(void *arg)
{
    int num = (int)arg;
    while (1)
    {
        pthread_mutex_lock(&g_mutex);
        while (nready == 0)
        {
            printf("%d begin wait a condtion ...\n", num);
            pthread_cond_wait(&g_cond, &g_mutex);
        }

        printf("%d end wait a condtion ...\n", num);
        printf("%d begin consume product ...\n", num);
        --nready;
        printf("%d end consume product ...\n", num);
        pthread_mutex_unlock(&g_mutex);
        sleep(1);
    }
    return NULL;
}

void *produce(void *arg)
{
    int num = (int)arg;
    while (1)
    {
        pthread_mutex_lock(&g_mutex);
        printf("%d begin produce product ...\n", num);
        ++nready;
        printf("%d end produce product ...\n", num);
        pthread_cond_signal(&g_cond);
        printf("%d signal ...\n", num);
        pthread_mutex_unlock(&g_mutex);
        sleep(1);
    }
    return NULL;
}

int main(void)
{
    int i;

    pthread_mutex_init(&g_mutex, NULL);
    pthread_cond_init(&g_cond, NULL);


    for (i = 0; i < CONSUMERS_COUNT; i++)
        pthread_create(&g_thread[i], NULL, consume, (void *)i);

    sleep(1);

    for (i = 0; i < PRODUCERS_COUNT; i++)
        pthread_create(&g_thread[CONSUMERS_COUNT + i], NULL, produce, (void *)i);

    for (i = 0; i < CONSUMERS_COUNT + PRODUCERS_COUNT; i++)
        pthread_join(g_thread[i], NULL);

    pthread_mutex_destroy(&g_mutex);
    pthread_cond_destroy(&g_cond);

    return 0;
}



信号量实现生产者和消费者
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>
#include <signal.h>
 
#define N 5   // 消费者或者生产者的数目
#define M 10 // 缓冲数目
//int M=10;
int in = 0; // 生产者放置产品的位置
int out = 0; // 消费者取产品的位置
 
int buff[M] = { 0 }; // 缓冲初始化为0，开始时没有产品
 
sem_t empty_sem; // 同步信号量，当满了时阻止生产者放产品
sem_t full_sem; // 同步信号量，当没产品时阻止消费者消费
pthread_mutex_t mutex; // 互斥信号量，一次只有一个线程访问缓冲
 
int product_id = 0; //生产者id
int prochase_id = 0; //消费者id
//信号处理函数
void Handlesignal(int signo){
    printf("程序退出\n",signo);
    exit(0);
}
/* 打印缓冲情况 */
void print() {
       inti;
       printf("产品队列为");
       for(i = 0; i < M; i++)
              printf("%d", buff[i]);
       printf("\n");
}
 
/* 生产者方法 */
void *product() {
       intid = ++product_id;
       while(1) {//重复进行
              //用sleep的数量可以调节生产和消费的速度，便于观察
              sleep(2);
 
              sem_wait(&empty_sem);
              pthread_mutex_lock(&mutex);
 
              in= in % M;
              printf("生产者%d在产品队列中放入第%d个产品\t",id, in);
 
              buff[in]= 1;
              print();
              ++in;
 
              pthread_mutex_unlock(&mutex);
              sem_post(&full_sem);
       }
}
 
/* 消费者方法 */
void *prochase() {
       intid = ++prochase_id;
       while(1) {//重复进行
              //用sleep的数量可以调节生产和消费的速度，便于观察
              sleep(5);
 
              sem_wait(&full_sem);
              pthread_mutex_lock(&mutex);
 
              out= out % M;
              printf("消费者%d从产品队列中取出第%d个产品\t",id, out);
 
              buff[out]= 0;
              print();
              ++out;
 
              pthread_mutex_unlock(&mutex);
              sem_post(&empty_sem);
       }
}
 
一些面试经历：
1.阿里秋招内推电话面试一：7/11
a.操作系统相关：产生死锁条件、避免死锁、linux下线程和进程、线程同步、内核态和用户态、线程池
b.数据库相关：  b+树和红黑树，怎样加快查询
c.linux相关：   查看cpu使用情况命令,CRTL C 发送sigint信号默认退出， CRTL Z发送SIGSTOP, kill -9 发送SIGKILL
d.C++相关：     多态怎么实现、虚函数表、多重继承会出什么问题
其他：          hashtable和hashmap、二叉树给出前序和后序是否可以还原，根据前序和中序还原二叉树

2.阿里秋招内推电话面试二：7/17
a.操作系统 ： 什么是系统调用，open是不是系统调用？ntfs文件系统索引实现？linux和windows最小调度单位？
b.数据库   ： 索引实现，为什么不用红黑树实现索引，主键索引和普通索引区别，事务级别
c.网络相关 ： TCP头，TCP是否可以篡改内容，http和https区别，https如何加密，select和epoll
d.C++      ： 智能指针
e.其他	   ： python垃圾回收 引用计数，快排和堆排，稳定性，i++是否是原子操作


数据库相关：
1.共享锁，单行或者几行，获得共享锁之后可读，不可写。允许其他操作再次获得共享锁，不允许获得排它锁。
2.排它锁，单行或者几行，获得之后可写，不允许其他操作获得共享锁和排它锁。
3.行级锁：并发度高，冲突低
4.表级锁：并发度低，冲突高

Innodb 引擎：
提供事务支持，实现了SQL标准的四种隔离级别，提供了行级锁和外键约束。 由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用Innodb引擎会提升效率。但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表。

MyISAM引擎：
MyIASM是MySQL默认的引擎，但是它没有提供对数据库事务的支持，也不支持行级锁和外键，因此当INSERT(插入)或UPDATE(更新)数据时即写操作需要锁定整个表，效率便会低一些。 如果表的读操作远远多于写操作且不需要数据库事务的支持，那么MyISAM也是很好的选择。

MyISAM适合：(1)做很多count 的计算；(2)插入不频繁，查询非常频繁；(3)没有事务。
InnoDB适合：(1)可靠性要求比较高，或者要求事务；(2)表更新和查询都相当的频繁，并且表锁定的机会比较大的情况。

事务特性：原子性、持久性（一旦提交，改变就是永久性的）、一致性（数据库从一个一致性状态变为另一个一致性状态）、隔离性（事务在执行时不能被其他事务干扰）
隔离级别：
1. read uncommitted  脏读 会读到别的事务未提交的数据
2. read committed    避免脏读，只能读到已提交的数据，在一个事务中会读到被其他事务更改的数据，不可重复读 oracle
3. 可重复读	     避免脏读和不可重复读的情况，会出现幻读。一个事务把数据库中所有记录1改为2，这时另一个事务插入1，出现幻读 mysql
4. 序列化



SHELL 脚本:
1. echo -e "123\n456" echo 再带换行
2. 定义局部变量 local
3. if [ ]; then
       ...
   elif [ ]; then
       ...
   fi
4.if -f 判断文件是否存在, [-x "/bin/ls"]是否有可执行权限, [-n "$var"] 判断是否有值, ["$a" = "$b"] 判断是否相等， -d 目录，if [2 -eq 5] 相等， -ne 不相等， -lt 小于，le小于等于， -gt大于，-ge大于等于
  -a and, -o or, ! no.
5. for i in {1,2,3,10}
   do
      echo $i
   done
6. while ($i <= 3)
   do
     echo $i
   done
7.函数参数:函数定义时，不指定参数，使用$1,$2,${10}来调用，$* 表示参数组成的字符串，$@表示参数列表，$# 表示参数个数。


python 相关:
1.python是没有c++中块作用域的，if，while是不会释放变量的。函数和类是作用域。
2.函数传参都是引用传递，int，string,元组是不可变对象，不会被改变。



C++ 相关:
1.sizeof 返回的是占用字节数
语法:
1. int a[]={10,20,30},int b[3], copy(a,a+3,b) 第二个指针指向超越末尾的位置
2. bool equal(v1.begin(),v1.end(),v2.begin())
3. copy时需保证有足够的空间来操作，可以使用back_inserter迭代器 copy(v1.begin(),v1end(),back_inserter(v2))
4. for(vector<int>::iterator i=v1.begin(); i != v1.end(); i++)
5. sort(v1.begin(),v1.end(),cmp)
6. 标准库中容器存入的对象都是原对象的拷贝，必须要可拷贝构造的。
7. list,vector,deque(双端队列) 都有push_back()   list和deque是链表实现的还有 push_front() list不具有[] 随机存取的能力
8. vector 最佳使用: 预先分配了足够的空间，不需要重新分配；只在后端添加或者删除元素。 push_back insert erase
9. deque 双端队列，利用多个连续的存储块，不需要重新分配空间。push_back() push_front(),insert,erase
10.set insert erase  find 找到则返回迭代器，找不到返回st.end()  size() *begin()返回第一个元素 *rbegin() 返回最后一个元素 
11.stack empty() size() push() pop() top()
12.queue empty() size() push() pop()前端出 back() front()
13.map<string,int> mp   插入 mp['id']=1, 查找mp.find('id') 返回迭代器，找不到返回end， erase删除一个元素，迭代时是不能用迭代器删除的。
14.map和set 都是基于红黑树实现的。



KVM and QEMU
1. KVM是嵌入到linux内核中负责虚拟化的模块，工作在内核态，需要硬件的支持，实现cpu和内存的虚拟化。
2. QEMU工作在用户态，创建虚拟机，进行IO和网络的虚拟化，每一个虚拟机是QEMU的一个进程，虚拟机中的进程是相应QEMU进程中的线程。
3. QEMU对虚拟机虚拟硬件，所有对硬件的操作都会被QEMU转义，影响性能。
4. KVM通过/dev/kvm暴露接口，使得CPU指令不再需要QEMU转义，直接运行，大大提高了速度。

VM and CONTAINER:
1.container是更轻量级的虚拟化，不包含操作系统内核，共享操作系统，每个container的名字空间都是不同的。

单例模式
class singleton
{
public:
static singleton& getinstance();
private:
singleton();
singleton(const singleton&);
singleton& operator=(const singleton&);

};
singleton& singleton::getinstance()
{
 static singleton instance;
 return instance;
}
singleton::singleton()
{
}


tmux: set -g mouse on

docker
 *docker run [options] image [command] [args]创建一个容器并运行命令
 -d deamon
 --name
 -i -t 命令窗口交互
 docker run --name mynginx -d -p 80:80 -v /data:/data nginx:latest
 *docker stop/start/restart
 *docker ps 查询运行中的容器
 *docker exec -it mynginx /bin/sh /root/runoob.sh

*********************************************************FREEWHELL******************************************************************************* 2018.4.14

1.Ad_Selector.cpp

PHASE 0: 初始化
   从request中获取network_id, site_section_id, aiid....
   restrictions
   生成slots


PHASE 1: closures building
   从 asset 和 site_section 出发，选出哪些network_id可以投放广告



